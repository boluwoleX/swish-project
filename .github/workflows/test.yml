name: Kube Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      base_image:
        description: 'Select the Base Image (e.g., ubuntu:20.04, node:14, python:3.9)'
        required: true
        default: 'ubuntu:20.04'
      packages:
        description: 'Comma-separated list of packages to install (e.g., curl, vim, git)'
        required: true
        default: 'curl,vim,git'
      memory_request:
        description: 'Memory Request (e.g., 8Gi)'
        required: true
        default: '8Gi'
      cpu_request:
        description: 'CPU Request (e.g., 2)'
        required: true
        default: '2'
      gpu_request:
        description: 'GPU Request (e.g., 1)'
        required: false
        default: '0'

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify kube directory exists
        run: |
          ls -l ./kube

      - name: Set working directory to kube and list files
        working-directory: ./kube
        run: |
          pwd
          ls -l

      - name: Install kind and kubectl
        run: |
          sudo curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          sudo chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          sudo curl -Lo kubectl https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl
          sudo chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Build Docker image with Custom Base and Packages
        run: |
          packages=$(echo "${{ inputs.packages }}" | tr ',' ' ')
          echo "FROM ${{ inputs.base_image }}" > Dockerfile
          echo "RUN apt-get update && apt-get install -y $packages" >> Dockerfile
          docker build -t boluwole/deploy-env:latest -f Dockerfile .
         
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUBPW }}

      - name: Push Docker Image to Docker Hub
        run: |
          docker push boluwole/deploy-env:latest

      - name: Create kind cluster
        run: |
          kind create cluster --config /home/runner/work/swish-project/swish-project/kube/kind-cluster-config.yaml
          kind get kubeconfig > $HOME/.kube/config

      - name: Install Prometheus Operator with Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace

      - name: Inject CPU and Memory Requests
        run: |
          sed -i 's/memory: "8Gi"/memory: "${{ inputs.memory_request }}"/g' /home/runner/work/swish-project/swish-project/kube/deployment.yaml
          sed -i 's/cpu: "2"/cpu: "${{ inputs.cpu_request }}"/g' /home/runner/work/swish-project/swish-project/kube/deployment.yaml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f /home/runner/work/swish-project/swish-project/kube/deployment.yaml
          kubectl apply -f /home/runner/work/swish-project/swish-project/kube/service.yaml
          kubectl apply -f /home/runner/work/swish-project/swish-project/kube/prom-stack.yaml
          kubectl apply -f /home/runner/work/swish-project/swish-project/kube/alertmanager-config.yaml

      - name: Expose Services
        run: |
          kubectl expose deployment deploy-env --type=NodePort --name=dev-environment-service --port=8080
          kubectl expose deployment deploy-env --type=NodePort --name=dev-environment-ssh --port=2222

      - name: Install Metrics Server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'

      - name: Describe Metrics Server Pods
        run: |
          kubectl describe pod -n kube-system -l k8s-app=metrics-server

      - name: Wait for Metrics Server to be ready (Proceed on Failure)
        continue-on-error: true
        run: |
          echo "Waiting for Metrics Server to be ready..."
          kubectl wait --namespace kube-system \
            --for=condition=Ready pod \
            --selector=k8s-app=metrics-server \
            --timeout=120s || echo "Metrics Server did not become ready, continuing anyway."

      - name: View pods
        run: |
          kubectl get pods --all-namespaces

      - name: Monitor Resource Usage
        run: |
          POD_NAME=$(kubectl get pods -n default -l app=deploy-env -o jsonpath="{.items[0].metadata.name}")
          echo "Pod name found: $POD_NAME"
          kubectl top pod $POD_NAME -n default > usage_data.txt || echo "Pod not ready for metrics"

      - name: Upload Usage Data
        uses: actions/upload-artifact@v4
        with:
          name: Usage Data
          path: usage_data.txt
